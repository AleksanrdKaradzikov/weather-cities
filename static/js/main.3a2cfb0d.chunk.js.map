{"version":3,"sources":["servises/weather-servis.js","components/form.jsx","components/weather-data.jsx","components/info.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["weatherServis","_API_KEY","city","url","this","fetch","response","json","result","Form","handleSubmit","handleChange","onSubmit","type","name","onChange","WeatherData","weatherData","temperatura","country","sunrise","pressure","sityName","humidity","weather","error","className","Info","getTime","timestamp","date","Date","setTime","getHours","toString","padStart","getMinutes","getSeconds","App","props","event","setState","inputValue","target","value","a","async","preventDefault","state","getWeather","data","console","log","main","temp","sys","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3a2cfb0d.chunk.js","sourcesContent":["class weatherServis {\r\n  _API_KEY = '0504bd9a29b0dd66645e38bc1b42690d';\r\n\r\n  async getWeather(city) {\r\n    city = city === '' ? 'London' : city;\r\n    const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${this._API_KEY}&units=metric`;\r\n    const response = await fetch(url);\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n\r\n}\r\n\r\nexport default weatherServis;\r\n","import React from 'react';\r\n\r\nconst Form = ({ handleSubmit, handleChange }) => {\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input type=\"text\" name=\"weather\" onChange={handleChange}/>\r\n      <button type=\"submit\">Узнать погоду</button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default Form;\r\n","import React from 'react';\r\n\r\nconst WeatherData = ({ weatherData }) => {\r\n  const { temperatura, country, sunrise, pressure, sityName, humidity, error } = weatherData;\r\n  let weather = null;\r\n  if (!error) {\r\n    weather = (sityName !== '') ? (\r\n      <div className=\"infoWeath\">\r\n          <p className=\"weather-data\">{`Местоположение: ${sityName}, ${country}`}</p>\r\n          <p className=\"weather-data\">{`Температура: ${temperatura}, градусов`}</p>\r\n          <p className=\"weather-data\">{`Влажность: ${humidity}`}</p>\r\n          <p className=\"weather-data\">{`Восход солнца: ${sunrise}`}</p>\r\n          <p className=\"weather-data\">{`Давление: ${pressure}`}</p>\r\n      </div>\r\n    ) :\r\n    (\r\n      <div className=\"infoWeath\">\r\n          <p className=\"weather-message\">Введите город и нажмите на кнопку узнать температуру, чтобы отобразить данные, при пустой строке по умолчанию будет выведана погода в Лондоне. Название города необходимо вводить на английском языке: London, \r\n                                         Saint Petersburg, Kiev и т.д  :)</p>\r\n      </div>\r\n    );\r\n  } else {\r\n    weather = (\r\n      <div className=\"infoWeath\">\r\n        <p className=\"error\">Возникли какие-то неполадки,  возможно вы не правильно ввели назавание города :(</p>\r\n      </div>\r\n    )\r\n  }\r\n  return (\r\n    <>\r\n        {weather}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default WeatherData;\r\n","import React from 'react';\r\n\r\nconst Info = () => (\r\n       <div>\r\n            <h2>Wether-Cities</h2>\r\n            <p>Узнай погоду в своём городе</p>\r\n       </div>\r\n)\r\n\r\nexport default Info;\r\n","import React from 'react';\r\nimport weatherServis from '../servises/weather-servis';\r\nimport Form from './form';\r\nimport WeatherData from './weather-data';\r\nimport Info from './info';\r\n\r\nconst getTime = (timestamp) => {\r\n  const date = new Date();\r\n  date.setTime(timestamp);\r\n  return `${date.getHours().toString().padStart(2, '0')}:${date.getMinutes().toString().padStart(2, '0')}:${date.getSeconds().toString().padStart(2, '0')}`;\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  weather = new weatherServis();\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputValue: '',\r\n      temperatura: '',\r\n      country: '',\r\n      sunrise: '',\r\n      pressure: '',\r\n      sityName: '',\r\n      humidity: '',\r\n      error: false,\r\n    }\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      inputValue: event.target.value,\r\n    })\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    try {\r\n      const { inputValue } = this.state;\r\n      const data = await this.weather.getWeather(inputValue);\r\n      console.log(data);\r\n      this.setState({\r\n        temperatura: data.main.temp,\r\n        country: data.sys.country,\r\n        sunrise: getTime(data.sys.sunrise),\r\n        pressure: data.main.pressure,\r\n        sityName: data.name,\r\n        humidity: data.main.humidity,\r\n        error: false,\r\n      });\r\n    } catch {\r\n      this.setState({\r\n        error: true,\r\n      })\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { temperatura, country, sunrise, pressure, sityName, humidity, error } = this.state;\r\n    const weatherData = {\r\n      temperatura,\r\n      country,\r\n      sunrise,\r\n      pressure,\r\n      sityName,\r\n      humidity,\r\n      error,\r\n    };\r\n    return (\r\n      <div className=\"wrapper\">\r\n        <div className=\"container\">\r\n        <div className=\"main\">\r\n            <div className=\"container\">\r\n              <div className=\"row\">\r\n                <div className=\"col-sm-12 col-lg-5 col-md-5 info\">\r\n                  <Info />\r\n                </div>\r\n                <div className=\"col-sm-12 col-lg-7 col-md-7 form\">\r\n                  <Form handleSubmit={this.handleSubmit}\r\n                        handleChange={this.handleChange} />\r\n                  <WeatherData weatherData={weatherData}/>\r\n                </div>\r\n              </div>\r\n            </div>\r\n         </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport 'normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './styles/App.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}